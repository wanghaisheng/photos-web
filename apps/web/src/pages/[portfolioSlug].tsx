import type { GetStaticProps, GetStaticPaths, NextPage } from "next";
import Head from "next/head";
import { Header } from "../features/header";
import { Footer } from "../features/footer";
import Layout from "../components/layout";
import { useRouter } from "next/router";
import { dehydrate, QueryClient, useQuery } from "react-query";
import { getPortfolio, getPortfolios } from "../services/portfolios";
import Photo from "../features/photos/components/photo";
import { getImageUrl } from "../utils/misc";
import { Lightbox } from "../components/lightbox";

export const getStaticPaths: GetStaticPaths = async () => {
  const { data } = await getPortfolios();
  const paths = data.map((path) => ({ params: { portfolioSlug: path.slug } }));
  return {
    paths,
    fallback: false,
  };
};

export const getStaticProps: GetStaticProps = async (ctx) => {
  const queryClient = new QueryClient();
  const slug = ctx.params?.portfolioSlug as string;
  await queryClient.prefetchQuery(["portfolio", slug], () =>
    getPortfolio(slug)
  );

  return {
    props: {
      dehydratedState: dehydrate(queryClient),
    },
  };
};

const PortfolioIndexPage: NextPage = () => {
  const router = useRouter();
  const slug = router.query.portfolioSlug as string;
  const { data, error, isLoading } = useQuery(["portfolio", slug], () =>
    getPortfolio(slug)
  );
  const selected = Number(router.query.selected);
  const { name, images = [] } = data || {};
  // TODO why name can be undefined?
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <Layout>
        <div> {JSON.stringify(router.query)}</div>
        <h1>Portfolio {name}</h1>
        <span>Loading: {isLoading}</span>
        <span>Error: {JSON.stringify(error)}</span>
        <section className="flex flex-col gap-10">
          {images.map((image, index) => (
            <Photo
              key={image.id}
              alt={image.alt}
              src={getImageUrl(image.id)}
              height={image.height}
              width={image.width}
              blurDataURL={image.placeholder}
              style={{
                width: "100%",
                maxHeight: "1200px",
                objectFit: "cover",
                cursor: "pointer",
              }}
              onClick={() =>
                router.replace({
                  query: { ...router.query, selected: index + 1 },
                })
              }
            />
          ))}
        </section>
      </Layout>
      {selected ? (
        <Lightbox
          initialIndex={selected - 1}
          photos={images}
          onClose={() =>
            router.replace(
              {
                query: { id: router.query.id },
              },
              undefined,
              { scroll: false } //TODO fix scroll
            )
          }
        />
      ) : null}
      <Footer />
    </>
  );
};

export default PortfolioIndexPage;
